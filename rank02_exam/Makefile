CCFLAGS = -Wextra -Werror -Wall

RESET = \033[0;39m
GRAY = \033[0;90m
RED = \033[0;91m
GREEN = \033[0;92m
YELLOW = \033[0;93m
BLUE = \033[0;94m
MAGENTA = \033[0;95m
CYAN = \033[0;96m
WHITE = \033[0;97m

# LEVEL 1

first_word:
	@gcc $(CCFLAGS) lvl1/$@/$@.c -o _outputs/$@
	@echo "$(GREEN)$@ compiled in $(BLUE)_outputs/$@$(RESET)"

fizzbuzz:
	@gcc $(CCFLAGS) lvl1/$@/$@.c -o _outputs/$@
	@echo "$(GREEN)$@ compiled in $(BLUE)_outputs/$@$(RESET)"

ft_putstr:
	@echo "$(YELLOW)Warning: $(RED)$@ $(RESET)is a function."
	@echo "$(YELLOW)Warning: $(RED)Nothing Compiled !$(RESET)"

ft_strcpy:
	@echo "$(YELLOW)Warning: $(RED)$@ $(RESET)is a function."
	@echo "$(YELLOW)Warning: $(RED)Nothing Compiled !$(RESET)"

ft_strlen:
	@echo "$(YELLOW)Warning: $(RED)$@ $(RESET)is a function."
	@echo "$(YELLOW)Warning: $(RED)Nothing Compiled !$(RESET)"

ft_swap:
	@echo "$(YELLOW)Warning: $(RED)$@ $(RESET)is a function."
	@echo "$(YELLOW)Warning: $(RED)Nothing Compiled !$(RESET)"

repeat_alpha:
	@gcc $(CCFLAGS) lvl1/$@/$@.c -o _outputs/$@
	@echo "$(GREEN)$@ compiled in $(BLUE)_outputs/$@$(RESET)"

rev_print:
	@gcc $(CCFLAGS) lvl1/$@/$@.c -o _outputs/$@
	@echo "$(GREEN)$@ compiled in $(BLUE)_outputs/$@$(RESET)"

rot_13:
	@gcc $(CCFLAGS) lvl1/$@/$@.c -o _outputs/$@
	@echo "$(GREEN)$@ compiled in $(BLUE)_outputs/$@$(RESET)"

rotone:
	@gcc $(CCFLAGS) lvl1/$@/$@.c -o _outputs/$@
	@echo "$(GREEN)$@ compiled in $(BLUE)_outputs/$@$(RESET)"

search_and_replace:
	@gcc $(CCFLAGS) lvl1/$@/$@.c -o _outputs/$@
	@echo "$(GREEN)$@ compiled in $(BLUE)_outputs/$@$(RESET)"

ulstr:
	@gcc $(CCFLAGS) lvl1/$@/$@.c -o _outputs/$@
	@echo "$(GREEN)$@ compiled in $(BLUE)_outputs/$@$(RESET)"

#Â LEVEL 2

alpha_mirror:
	@gcc $(CCFLAGS) lvl2/$@/$@.c -o _outputs/$@
	@echo "$(GREEN)$@ compiled in $(BLUE)_outputs/$@$(RESET)"

camel_to_snake:
	@gcc $(CCFLAGS) lvl2/$@/$@.c -o _outputs/$@
	@echo "$(GREEN)$@ compiled in $(BLUE)_outputs/$@$(RESET)"

do_op:
	@gcc $(CCFLAGS) lvl2/$@/$@.c -o _outputs/$@
	@echo "$(GREEN)$@ compiled in $(BLUE)_outputs/$@$(RESET)"

ft_atoi:
	@echo "$(YELLOW)Warning: $(RED)$@ $(RESET)is a function."
	@echo "$(YELLOW)Warning: $(RED)Nothing Compiled !$(RESET)"

ft_strcmp:
	@echo "$(YELLOW)Warning: $(RED)$@ $(RESET)is a function."
	@echo "$(YELLOW)Warning: $(RED)Nothing Compiled !$(RESET)"

ft_strcspn:
	@echo "$(YELLOW)Warning: $(RED)$@ $(RESET)is a function."
	@echo "$(YELLOW)Warning: $(RED)Nothing Compiled !$(RESET)"

ft_strdup:
	@echo "$(YELLOW)Warning: $(RED)$@ $(RESET)is a function."
	@echo "$(YELLOW)Warning: $(RED)Nothing Compiled !$(RESET)"

ft_strpbrk:
	@echo "$(YELLOW)Warning: $(RED)$@ $(RESET)is a function."
	@echo "$(YELLOW)Warning: $(RED)Nothing Compiled !$(RESET)"

ft_strrev:
	@echo "$(YELLOW)Warning: $(RED)$@ $(RESET)is a function."
	@echo "$(YELLOW)Warning: $(RED)Nothing Compiled !$(RESET)"

ft_strspn:
	@echo "$(YELLOW)Warning: $(RED)$@ $(RESET)is a function."
	@echo "$(YELLOW)Warning: $(RED)Nothing Compiled !$(RESET)"

inter:
	@gcc $(CCFLAGS) lvl2/$@/$@.c -o _outputs/$@
	@echo "$(GREEN)$@ compiled in $(BLUE)_outputs/$@$(RESET)"

last_word:
	@gcc $(CCFLAGS) lvl2/$@/$@.c -o _outputs/$@
	@echo "$(GREEN)$@ compiled in $(BLUE)_outputs/$@$(RESET)"

max:
	@echo "$(YELLOW)Warning: $(RED)$@ $(RESET)is a function."
	@echo "$(YELLOW)Warning: $(RED)Nothing Compiled !$(RESET)"

print_bits:
	@echo "$(YELLOW)Warning: $(RED)$@ $(RESET)is a function."
	@echo "$(YELLOW)Warning: $(RED)Nothing Compiled !$(RESET)"

reverse_bits:
	@echo "$(YELLOW)Warning: $(RED)$@ $(RESET)is a function."
	@echo "$(YELLOW)Warning: $(RED)Nothing Compiled !$(RESET)"

snake_to_camel:
	@gcc $(CCFLAGS) lvl2/$@/$@.c -o _outputs/$@
	@echo "$(GREEN)$@ compiled in $(BLUE)_outputs/$@$(RESET)"

swap_bits:
	@echo "$(YELLOW)Warning: $(RED)$@ $(RESET)is a function."
	@echo "$(YELLOW)Warning: $(RED)Nothing Compiled !$(RESET)"

union:
	@gcc $(CCFLAGS) lvl2/$@/$@.c -o _outputs/$@
	@echo "$(GREEN)$@ compiled in $(BLUE)_outputs/$@$(RESET)"

wdmatch:
	@gcc $(CCFLAGS) lvl2/$@/$@.c -o _outputs/$@
	@echo "$(GREEN)$@ compiled in $(BLUE)_outputs/$@$(RESET)"

.PHONY: first_word fizzbuzz ft_putstr ft_strcpy ft_strlen ft_swap repeat_alpha \
		rev_print rot_13 rotone search_and_replace ulstr alpha_mirror \
		camel_to_snake do_op ft_atoi ft_strcmp ft_strcspn ft_strdup \
		ft_strpbrk ft_strrev ft_strspn inter last_word max print_bits \
		reverse_bits snake_to_camel swap_bits union wdmatch